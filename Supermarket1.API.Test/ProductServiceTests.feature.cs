// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Supermarket1.API.Test
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProductServiceTestsFeature : object, Xunit.IClassFixture<ProductServiceTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProductServiceTests.feature"
#line hidden
        
        public ProductServiceTestsFeature(ProductServiceTestsFeature.FixtureData fixtureData, Supermarket1_API_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "ProductServiceTests", "As a Developer \r\nI want to add a new Product throught API\r\nSo that I can be avail" +
                    "able for applications.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
#line 7
  testRunner.Given("the endpoint https://localhost:5001/api/v1/product is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table30.AddRow(new string[] {
                        "1",
                        "Fruits and Vegetables"});
#line 8
  testRunner.And("A Category is already stored", ((string)(null)), table30, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add product")]
        [Xunit.TraitAttribute("FeatureTitle", "ProductServiceTests")]
        [Xunit.TraitAttribute("Description", "Add product")]
        [Xunit.TraitAttribute("Category", "product-adding")]
        public virtual void AddProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "product-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add product", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "QuantityPackage",
                            "UnitOfMeasurement",
                            "CategoryId"});
                table31.AddRow(new string[] {
                            "Apple",
                            "3",
                            "2",
                            "1"});
#line 14
   testRunner.When("a Post request is sent", ((string)(null)), table31, "When ");
#line hidden
#line 17
   testRunner.Then("A response with Status 200 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "QuantityPackage",
                            "UnitOfMeasurement",
                            "CategoryId"});
                table32.AddRow(new string[] {
                            "Apple",
                            "3",
                            "MG",
                            "1"});
#line 18
   testRunner.And("A product Resource is included in Response Body", ((string)(null)), table32, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Product with Invalid Category")]
        [Xunit.TraitAttribute("FeatureTitle", "ProductServiceTests")]
        [Xunit.TraitAttribute("Description", "Add Product with Invalid Category")]
        [Xunit.TraitAttribute("Category", "product-invalid-category")]
        public virtual void AddProductWithInvalidCategory()
        {
            string[] tagsOfScenario = new string[] {
                    "product-invalid-category"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Product with Invalid Category", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "QuantityPackage",
                            "UnitOfMeasurement",
                            "CategoryId"});
                table33.AddRow(new string[] {
                            "Orange",
                            "1",
                            "2",
                            "200"});
#line 23
   testRunner.When("a Post request is sent", ((string)(null)), table33, "When ");
#line hidden
#line 26
   testRunner.Then("A response with Status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
   testRunner.And("a Message of \"Invalid Category.\" is included in Response Body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add product with existing Name")]
        [Xunit.TraitAttribute("FeatureTitle", "ProductServiceTests")]
        [Xunit.TraitAttribute("Description", "Add product with existing Name")]
        [Xunit.TraitAttribute("Category", "duplicated-product")]
        public virtual void AddProductWithExistingName()
        {
            string[] tagsOfScenario = new string[] {
                    "duplicated-product"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add product with existing Name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "QuantityPackage",
                            "UnitOfMeasurement",
                            "CategoryId"});
                table34.AddRow(new string[] {
                            "Banana",
                            "2",
                            "2",
                            "1"});
#line 30
   testRunner.Given("a Product is already stored", ((string)(null)), table34, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "QuantityPackage",
                            "UnitOfMeasurement",
                            "CategoryId"});
                table35.AddRow(new string[] {
                            "Banana",
                            "1",
                            "2",
                            "1"});
#line 33
   testRunner.When("a Post request is sent", ((string)(null)), table35, "When ");
#line hidden
#line 36
   testRunner.Then("A response with Status 400 is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
   testRunner.And("a Message of \"Product Name already exists.\" is included in Response Body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProductServiceTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProductServiceTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
