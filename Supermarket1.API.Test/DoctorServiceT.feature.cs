// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Supermarket1.API.Test
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DoctorServiceTFeature : object, Xunit.IClassFixture<DoctorServiceTFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DoctorServiceT.feature"
#line hidden
        
        public DoctorServiceTFeature(DoctorServiceTFeature.FixtureData fixtureData, Supermarket1_API_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "DoctorServiceT", "As a Developer\r\nI want to add a new Doctor throught API\r\nSo that Doctors can have" +
                    " their own profile", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
#line 7
  testRunner.Given("the endpoint https://localhost:5001/api/v1/doctor is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Description"});
            table11.AddRow(new string[] {
                        "1",
                        "Cardiology",
                        "Heart"});
#line 8
  testRunner.And("A Specialty is already stored", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Dni",
                        "Name",
                        "Lastname",
                        "Age",
                        "ClinicLocationId"});
            table12.AddRow(new string[] {
                        "2",
                        "88888888",
                        "Ricardo",
                        "Palma",
                        "23",
                        "null"});
#line 11
  testRunner.And("A Clinic is already stored", ((string)(null)), table12, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Doctor")]
        [Xunit.TraitAttribute("FeatureTitle", "DoctorServiceT")]
        [Xunit.TraitAttribute("Description", "Add Doctor")]
        [Xunit.TraitAttribute("Category", "doctor-adding")]
        public virtual void AddDoctor()
        {
            string[] tagsOfScenario = new string[] {
                    "doctor-adding"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Doctor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Dni",
                            "Name",
                            "Lastname",
                            "Age",
                            "SpecialtyId",
                            "ClinicId"});
                table13.AddRow(new string[] {
                            "72837483",
                            "Simba",
                            "Tino",
                            "23",
                            "1",
                            "2"});
#line 16
  testRunner.When("a Doctor Post request is sent", ((string)(null)), table13, "When ");
#line hidden
#line 19
  testRunner.Then("A response with Status 200 is received for doctor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Dni",
                            "Name",
                            "Lastname",
                            "Age",
                            "SpecialtyId",
                            "ClinicId"});
                table14.AddRow(new string[] {
                            "2837483",
                            "Simba",
                            "Tino",
                            "23",
                            "1",
                            "2"});
#line 20
  testRunner.And("A Doctor Resource is included in Response Body", ((string)(null)), table14, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Doctor with Invalid Specialty")]
        [Xunit.TraitAttribute("FeatureTitle", "DoctorServiceT")]
        [Xunit.TraitAttribute("Description", "Add Doctor with Invalid Specialty")]
        [Xunit.TraitAttribute("Category", "doctor-invalid-specialty")]
        public virtual void AddDoctorWithInvalidSpecialty()
        {
            string[] tagsOfScenario = new string[] {
                    "doctor-invalid-specialty"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Doctor with Invalid Specialty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Dni",
                            "Name",
                            "Lastname",
                            "Age",
                            "SpecialtyId",
                            "ClinicId"});
                table15.AddRow(new string[] {
                            "72837483",
                            "Simba",
                            "Tino",
                            "23",
                            "404",
                            "2"});
#line 25
  testRunner.When("a Doctor Post request is sent", ((string)(null)), table15, "When ");
#line hidden
#line 28
  testRunner.Then("A response with Status 400 is received for doctor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
  testRunner.And("a Message of \"Invalid Specialty.\" is included in Response Body for doctor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add Doctor with Invalid Clinic")]
        [Xunit.TraitAttribute("FeatureTitle", "DoctorServiceT")]
        [Xunit.TraitAttribute("Description", "Add Doctor with Invalid Clinic")]
        [Xunit.TraitAttribute("Category", "doctor-invalid-clinic")]
        public virtual void AddDoctorWithInvalidClinic()
        {
            string[] tagsOfScenario = new string[] {
                    "doctor-invalid-clinic"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Doctor with Invalid Clinic", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Dni",
                            "Name",
                            "Lastname",
                            "Age",
                            "SpecialtyId",
                            "ClinicId"});
                table16.AddRow(new string[] {
                            "3",
                            "72837483",
                            "Simba",
                            "Tino",
                            "23",
                            "1",
                            "404"});
#line 32
  testRunner.When("a Doctor Post request is sent", ((string)(null)), table16, "When ");
#line hidden
#line 35
  testRunner.Then("A response with Status 400 is received for doctor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
  testRunner.And("a Message of \"Invalid Clinic.\" is included in Response Body for doctor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DoctorServiceTFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DoctorServiceTFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
